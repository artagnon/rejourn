#!/usr/bin/env python
#-*- Mode:Python -*-
from __future__ import with_statement
import os
import re
import util

"""Generate the Makefile"""

config = util.parse_config()
indir = config.get('indir')
outdir = config.get('outdir')
separator = config.get('separator', '---')
tagprefix = 'tags'
target = {}
tags = {}

for path, dirs, files in os.walk(indir):
    for filename in files:
        if not filename.endswith('.txt'):
            continue
        # Find targets from the infile headers
        with open(os.path.join(path, filename), 'r') as infh:
            raw_header = infh.read().split('\n' + separator + '\n', 1)[0]
            header = util.parse_header(raw_header)
            title = header.get('title', 'No Title')
            permalink = header.get('permalink', util.build_slug(config, title, filename))
            if not header.get('draft', None):
                target[infh.name] = os.path.join(outdir, permalink + '.html')
                if header.get('tags', None):
                    for tag in header.get('tags', None).split(', '):
                        if tag in tags.keys():
                            tags[tag].append(infh.name)
                        else:
                            tags[tag] = [infh.name]

# Write the Makefile
with open('Makefile', 'w') as makefh:
    makefh.write(".PHONY: default test clean\n")
    makefh.write("ifndef V\nQUIET_BUILD       = @echo '   ' BUILD $@;\nendif\n")
    # PHONY default: Build all targets
    makefh.write("default: "
                 + ' '.join(target.values()) + ' '
                 + ' '.join([os.path.join(outdir, 'archive.html'),
                             os.path.join(outdir, 'index.html'),
                             os.path.join(outdir, 'index.rss')]) + ' '
                 + ' '.join(map(lambda t: os.path.join(outdir, tagprefix, t + '.html'), tags.keys())) + ' '
                 + ' '.join(map(lambda t: os.path.join(outdir, t + '.rss'), tags.keys())) + '\n')

    # Write the various targets
    for filename in target.keys():
        makefh.write(target[filename] + ': '
                     + filename + '\n\t'
                     + '$(QUIET_BUILD)./build ' + filename[:-4] + '\n')

    # Special archive and index target
    makefh.write(os.path.join(outdir, 'archive.html: ')
                 + ' '.join(target.keys())
                 + '\n\t$(QUIET_BUILD)./build archive '
                 + ' '.join(map(lambda f: f[:-4], target.keys())) + '\n')
    makefh.write(os.path.join(outdir, 'index.html: ')
                 + ' '.join(target.keys())
                 + '\n\t$(QUIET_BUILD)./build index '
                 + ' '.join(map(lambda f: f[:-4], target.keys())) + '\n')
    makefh.write(os.path.join(outdir, 'index.rss: ')
                 + ' '.join(target.keys())
                 + '\n\t$(QUIET_BUILD)./build index.rss '
                 + ' '.join(map(lambda f: f[:-4], target.keys())) + '\n')

    # Tags
    for tag in tags:
        makefh.write(os.path.join(outdir, tagprefix, tag + '.html: ')
                + ' '.join(tags[tag])
                + '\n\t$(QUIET_BUILD)./build ' + tag + ' '
                + ' '.join(map(lambda f: f[:-4], tags[tag])) + '\n')
        makefh.write(os.path.join(outdir, tag + '.rss: ')
                + ' '.join(tags[tag])
                + '\n\t$(QUIET_BUILD)./build ' + tag + '.rss '
                + ' '.join(map(lambda f: f[:-4], tags[tag])) + '\n')
    tagnames = map(lambda i: "%s (%d)" % (i, len(tags[i])), tags.keys())

    # Sort tags: begin with the one with the most posts
    pattern = r".+ \((.+)\)"
    repl = r"\1"
    tagnames.sort(lambda i, j: cmp(int(re.sub(pattern, repl, i)), int(re.sub(pattern, repl, j))), reverse = True)

    with open('tags', 'w') as tagsfh:
        tagsfh.write(', '.join(tagnames))

    # Phony test and clean targets
    makefh.write("test:\n\tnosetests\n")
    makefh.write("clean:\n\t$(RM) "
                 + os.path.join(outdir, "*.html") + " "
                 + os.path.join(outdir, "*.rss") + " "
                 + os.path.join(outdir, tagprefix, "*.html") + " "
                 + "tags")
    
        
# vim:set shiftwidth=4 softtabstop=4 expandtab:
